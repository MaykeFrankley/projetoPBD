-- MySQL Script generated by MySQL Workbench
-- Mon Nov 25 02:01:05 2019
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema argus
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema argus
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `argus` DEFAULT CHARACTER SET utf8 ;
USE `argus` ;

-- -----------------------------------------------------
-- Table `argus`.`Aluno-Turma`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Aluno-Turma` (
  `codAluno` INT NOT NULL,
  `codTurma` VARCHAR(6) NOT NULL,
  `anoLetivo` INT NOT NULL,
  `situacao` ENUM("Pendente", "Aprovado", "Reprovado") NOT NULL,
  PRIMARY KEY (`codAluno`, `codTurma`, `anoLetivo`),
  INDEX `index_codAluno_turma` (`codAluno` ASC) INVISIBLE,
  INDEX `index_codTurma_turma` (`codTurma` ASC) VISIBLE,
  INDEX `fk_anoLetivo_turma_idx` (`anoLetivo` ASC) VISIBLE,
  CONSTRAINT `fk_codAluno_turma`
    FOREIGN KEY (`codAluno`)
    REFERENCES `argus`.`Alunos` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codTurma_turma`
    FOREIGN KEY (`codTurma`)
    REFERENCES `argus`.`Turmas` (`codTurma`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_anoLetivo_turma`
    FOREIGN KEY (`anoLetivo`)
    REFERENCES `argus`.`Turmas` (`anoLetivo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Alunos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Alunos` (
  `codPessoa` INT NOT NULL,
  `nomeMae` VARCHAR(100) NOT NULL,
  `nomePai` VARCHAR(100) NOT NULL,
  `codResponsavelFin` INT NOT NULL,
  `Status` ENUM("Ativo", "Inativo") NOT NULL,
  PRIMARY KEY (`codPessoa`),
  INDEX `index_codMae` (`nomeMae` ASC) VISIBLE,
  INDEX `index_codPai` (`nomePai` ASC) VISIBLE,
  INDEX `index_codPessoa_aluno` (`codPessoa` ASC) VISIBLE,
  INDEX `index_responsavel` (`codResponsavelFin` ASC) VISIBLE,
  CONSTRAINT `fk_codPessoa_aluno`
    FOREIGN KEY (`codPessoa`)
    REFERENCES `argus`.`Pessoas` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_Responsavel_aluno`
    FOREIGN KEY (`codResponsavelFin`)
    REFERENCES `argus`.`ResponsaveisFinanceiros` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Boletos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Boletos` (
  `codResponsavel` INT NOT NULL,
  `codAluno` INT NOT NULL,
  `codCurriculo` VARCHAR(5) NOT NULL,
  `anoLetivo` INT NOT NULL,
  `arquivoPdf` MEDIUMBLOB NULL DEFAULT NULL,
  PRIMARY KEY (`codResponsavel`, `codAluno`, `codCurriculo`, `anoLetivo`),
  INDEX `index_codAluno_pag` (`codAluno` ASC) INVISIBLE,
  INDEX `index_codCurriclo_pag` (`codCurriculo` ASC) INVISIBLE,
  INDEX `index_codResponsavel_pag` (`codResponsavel` ASC) INVISIBLE,
  INDEX `index_anoLetivo_pag` (`anoLetivo` ASC) INVISIBLE,
  CONSTRAINT `fk_codCurriclo_pag`
    FOREIGN KEY (`codCurriculo`)
    REFERENCES `argus`.`Precos` (`codCurriculo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codResponsavel_pag`
    FOREIGN KEY (`codResponsavel`)
    REFERENCES `argus`.`ResponsaveisFinanceiros` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codAluno_pag`
    FOREIGN KEY (`codAluno`)
    REFERENCES `argus`.`Alunos` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Contatos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Contatos` (
  `codPessoa` INT NOT NULL,
  `Telefone` VARCHAR(13) NULL,
  `Celular` VARCHAR(14) NOT NULL,
  `Email` VARCHAR(45) NULL,
  `whatsapp` TINYINT NOT NULL,
  PRIMARY KEY (`codPessoa`),
  INDEX `index_codPessoa_cont` (`codPessoa` ASC) VISIBLE,
  CONSTRAINT `fk_codPessoa_cont`
    FOREIGN KEY (`codPessoa`)
    REFERENCES `argus`.`Pessoas` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Curriculo`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Curriculo` (
  `codCurriculo` VARCHAR(5) NOT NULL,
  `Nome` VARCHAR(40) NOT NULL,
  `Tipo` ENUM("Bimestral", "Trimestral") NOT NULL,
  PRIMARY KEY (`codCurriculo`),
  INDEX `index_codCurriculo_curr` (`codCurriculo` ASC) INVISIBLE,
  INDEX `index_tipo_cur` (`Tipo` ASC) VISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Curriculo-Disciplina`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Curriculo-Disciplina` (
  `codCurriculo` VARCHAR(5) NOT NULL,
  `codDisciplina` VARCHAR(3) NOT NULL,
  `ano` INT NOT NULL,
  `cargaHoraria` INT NOT NULL,
  PRIMARY KEY (`codCurriculo`, `codDisciplina`, `ano`),
  INDEX `index_codCurriculo_CD` (`codCurriculo` ASC) VISIBLE,
  INDEX `index_codDisciplina_CD` (`codDisciplina` ASC) VISIBLE,
  INDEX `index_ano_CD` (`ano` ASC) VISIBLE,
  INDEX `index_cargaHoraria_CD` (`cargaHoraria` ASC) VISIBLE,
  UNIQUE INDEX `uniques` (`codDisciplina` ASC, `codCurriculo` ASC, `ano` ASC) INVISIBLE,
  CONSTRAINT `fk_codCurriculo_CD`
    FOREIGN KEY (`codCurriculo`)
    REFERENCES `argus`.`Curriculo` (`codCurriculo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codDisciplina_CD`
    FOREIGN KEY (`codDisciplina`)
    REFERENCES `argus`.`Disciplinas` (`codDisciplina`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Disciplinas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Disciplinas` (
  `codDisciplina` VARCHAR(3) NOT NULL,
  `Nome` VARCHAR(20) NOT NULL,
  `Status` ENUM("Ativo", "Inativo") NOT NULL,
  PRIMARY KEY (`codDisciplina`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Enderecos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Enderecos` (
  `codPessoa` INT NOT NULL,
  `Rua` VARCHAR(45) NOT NULL,
  `Numero` INT NOT NULL,
  `Complemento` VARCHAR(45) NULL,
  `Bairro` VARCHAR(45) NOT NULL,
  `Cidade` VARCHAR(45) NOT NULL,
  `Estado` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`codPessoa`),
  INDEX `INDEX_codPessoa` (`codPessoa` ASC) INVISIBLE,
  CONSTRAINT `fk_codPessoa_end`
    FOREIGN KEY (`codPessoa`)
    REFERENCES `argus`.`Pessoas` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`MediaGeralAluno`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`MediaGeralAluno` (
  `codAluno` INT NOT NULL,
  `codDisciplina` VARCHAR(3) NOT NULL,
  `serie` INT NOT NULL,
  `anoLetivo` INT NOT NULL,
  `media` FLOAT NULL,
  `situacao` ENUM("Pendente", "AM", "AP", "RP") NOT NULL,
  PRIMARY KEY (`codAluno`, `anoLetivo`, `serie`, `codDisciplina`),
  INDEX `fk_codDisciplina_media_idx` (`codDisciplina` ASC) VISIBLE,
  CONSTRAINT `fk_codAluno_media`
    FOREIGN KEY (`codAluno`)
    REFERENCES `argus`.`Alunos` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codDisciplina_media`
    FOREIGN KEY (`codDisciplina`)
    REFERENCES `argus`.`Disciplinas` (`codDisciplina`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`MudancaDeSenhas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`MudancaDeSenhas` (
  `CPF` VARCHAR(14) NOT NULL,
  `dataSolicitacao` DATE NOT NULL,
  `horaSolicitacao` TIME NOT NULL,
  PRIMARY KEY (`CPF`),
  INDEX `index_CPF_ms` (`CPF` ASC) VISIBLE,
  UNIQUE INDEX `CPF_UNIQUE` (`CPF` ASC) VISIBLE,
  CONSTRAINT `fk_CPF_ms`
    FOREIGN KEY (`CPF`)
    REFERENCES `argus`.`Usuarios` (`CPF`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Notas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Notas` (
  `codAluno` INT NOT NULL,
  `codDisciplina` VARCHAR(3) NOT NULL,
  `serie` INT NOT NULL,
  `anoLetivo` INT NOT NULL,
  `unidade` ENUM("Bimestral", "Trimestral") NOT NULL,
  `valorUnidade` INT NOT NULL,
  `media` FLOAT NULL,
  `situacao` ENUM("Pendente", "Atualizado", "Finalizado") NOT NULL,
  PRIMARY KEY (`codAluno`, `codDisciplina`, `serie`, `anoLetivo`, `unidade`, `valorUnidade`),
  INDEX `index_codAluno_notas` (`codAluno` ASC) INVISIBLE,
  INDEX `index_codDisciplina_notas` (`codDisciplina` ASC) INVISIBLE,
  INDEX `index_serie_notas` (`serie` ASC) INVISIBLE,
  INDEX `index_anoLetivo_notas` (`anoLetivo` ASC) VISIBLE,
  CONSTRAINT `fk_codAluno_notas`
    FOREIGN KEY (`codAluno`)
    REFERENCES `argus`.`Alunos` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codDisciplina_notas`
    FOREIGN KEY (`codDisciplina`)
    REFERENCES `argus`.`Disciplinas` (`codDisciplina`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Pagamentos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Pagamentos` (
  `codResponsavel` INT NOT NULL,
  `codAluno` INT NOT NULL,
  `codCurriculo` VARCHAR(5) NOT NULL,
  `anoLetivo` INT NOT NULL,
  `nossoNumero` BIGINT NOT NULL,
  `num_parcela` INT NOT NULL,
  `dt_vencimento` DATE NOT NULL,
  `situacao` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`codResponsavel`, `codAluno`, `codCurriculo`, `anoLetivo`, `nossoNumero`),
  CONSTRAINT `fk_Pagamentos_Boletos1`
    FOREIGN KEY (`codResponsavel` , `codAluno` , `codCurriculo` , `anoLetivo`)
    REFERENCES `argus`.`Boletos` (`codResponsavel` , `codAluno` , `codCurriculo` , `anoLetivo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Pessoas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Pessoas` (
  `codPessoa` INT NOT NULL AUTO_INCREMENT,
  `Nome` VARCHAR(100) NOT NULL,
  `Naturalidade` VARCHAR(40) NOT NULL,
  `Dt_nascimento` DATE NOT NULL,
  `CPF` VARCHAR(14) NULL,
  `Status` ENUM("Ativo", "Inativo") NOT NULL,
  PRIMARY KEY (`codPessoa`),
  UNIQUE INDEX `CPF_UNIQUE` (`CPF` ASC) INVISIBLE,
  INDEX `index_Nome_pessoas` (`Nome` ASC) INVISIBLE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Precos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Precos` (
  `codCurriculo` VARCHAR(5) NOT NULL,
  `valor` DOUBLE NOT NULL,
  PRIMARY KEY (`codCurriculo`),
  INDEX `index_codCurriculo_preco` (`codCurriculo` ASC) INVISIBLE,
  CONSTRAINT `fk_codCurriculo_precos`
    FOREIGN KEY (`codCurriculo`)
    REFERENCES `argus`.`Curriculo` (`codCurriculo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Professores`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Professores` (
  `codPessoa` INT NOT NULL,
  `CPF` VARCHAR(14) NOT NULL,
  `formacao` VARCHAR(15) NOT NULL,
  `cursoFormacao` VARCHAR(45) NOT NULL,
  `Status` VARCHAR(7) NOT NULL,
  PRIMARY KEY (`codPessoa`),
  INDEX `INDEX_codPessoa` (`codPessoa` ASC) VISIBLE,
  INDEX `INDEX_CPF` (`CPF` ASC) VISIBLE,
  CONSTRAINT `fk_codPessoa_prof`
    FOREIGN KEY (`codPessoa`)
    REFERENCES `argus`.`Pessoas` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CPF_prof`
    FOREIGN KEY (`CPF`)
    REFERENCES `argus`.`Pessoas` (`CPF`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Professores-Disciplinas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Professores-Disciplinas` (
  `codProfessor` INT NOT NULL,
  `codDisciplina` VARCHAR(3) NOT NULL,
  `codCurriculo` VARCHAR(5) NOT NULL,
  `ano` INT NOT NULL,
  INDEX `codProfessor_INDEX` (`codProfessor` ASC) VISIBLE,
  INDEX `codDisciplina_INDEX` (`codDisciplina` ASC) VISIBLE,
  PRIMARY KEY (`codDisciplina`, `codCurriculo`, `ano`),
  INDEX `index_curriculo_PD` (`codCurriculo` ASC) VISIBLE,
  INDEX `index_ano_PD` (`ano` ASC) VISIBLE,
  CONSTRAINT `fk_codProfessor_inner`
    FOREIGN KEY (`codProfessor`)
    REFERENCES `argus`.`Professores` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codDisciplina_inner`
    FOREIGN KEY (`codDisciplina`)
    REFERENCES `argus`.`Curriculo-Disciplina` (`codDisciplina`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codCurriculo_inner`
    FOREIGN KEY (`codCurriculo`)
    REFERENCES `argus`.`Curriculo-Disciplina` (`codCurriculo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_ano_inner`
    FOREIGN KEY (`ano`)
    REFERENCES `argus`.`Curriculo-Disciplina` (`ano`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`ResponsaveisFinanceiros`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`ResponsaveisFinanceiros` (
  `codPessoa` INT NOT NULL,
  `codAluno` INT NOT NULL,
  `CPF` VARCHAR(14) NOT NULL,
  `Status` ENUM("Ativo", "Inativo") NOT NULL,
  PRIMARY KEY (`codPessoa`, `codAluno`),
  INDEX `fk_CPF_resp_idx` (`CPF` ASC) VISIBLE,
  INDEX `index_codResp` (`codPessoa` ASC) VISIBLE,
  INDEX `fk_codAluno_resp_idx` (`codAluno` ASC) VISIBLE,
  CONSTRAINT `fk_codPessoa_resp`
    FOREIGN KEY (`codPessoa`)
    REFERENCES `argus`.`Pessoas` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codAluno_resp`
    FOREIGN KEY (`codAluno`)
    REFERENCES `argus`.`Pessoas` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CPF_resp`
    FOREIGN KEY (`CPF`)
    REFERENCES `argus`.`Pessoas` (`CPF`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`SessaoPedagogica`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`SessaoPedagogica` (
  `codPedagogo` INT NOT NULL,
  `codAluno` INT NOT NULL,
  `data` DATE NOT NULL,
  `detalhamento` TEXT NOT NULL,
  `status` ENUM("Em Atendimento", "Concluído") NOT NULL,
  PRIMARY KEY (`codPedagogo`, `codAluno`, `data`),
  INDEX `index_codPedagogo_sessao` (`codPedagogo` ASC) INVISIBLE,
  INDEX `fk_codAluno_idx` (`codAluno` ASC) VISIBLE,
  CONSTRAINT `fk_codPedagogo_sp`
    FOREIGN KEY (`codPedagogo`)
    REFERENCES `argus`.`Usuarios` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codAluno`
    FOREIGN KEY (`codAluno`)
    REFERENCES `argus`.`Alunos` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Turmas`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Turmas` (
  `codTurma` VARCHAR(6) NOT NULL,
  `codCurriculo` VARCHAR(5) NOT NULL,
  `anoLetivo` INT NOT NULL,
  `ano` INT NOT NULL,
  PRIMARY KEY (`codTurma`, `anoLetivo`),
  INDEX `index_curriculo_turm` (`codCurriculo` ASC) VISIBLE,
  INDEX `index_anoLetivo_turm` (`anoLetivo` ASC) VISIBLE,
  CONSTRAINT `fk_curriculo_turmas`
    FOREIGN KEY (`codCurriculo`)
    REFERENCES `argus`.`Curriculo` (`codCurriculo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`Usuarios`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`Usuarios` (
  `codPessoa` INT NOT NULL,
  `CPF` VARCHAR(14) NOT NULL,
  `User` VARCHAR(25) NOT NULL,
  `Senha` VARCHAR(32) NOT NULL,
  `Tipo` VARCHAR(10) NOT NULL,
  `Status` ENUM("Ativo", "Inativo") NOT NULL,
  PRIMARY KEY (`codPessoa`),
  INDEX `index_codPessoa_usu` (`codPessoa` ASC) INVISIBLE,
  INDEX `index_CPF_usu` (`CPF` ASC) INVISIBLE,
  UNIQUE INDEX `CPF_UNIQUE` (`CPF` ASC) VISIBLE,
  CONSTRAINT `fk_codPessoa_usu`
    FOREIGN KEY (`codPessoa`)
    REFERENCES `argus`.`Pessoas` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_CPF_usu`
    FOREIGN KEY (`CPF`)
    REFERENCES `argus`.`Pessoas` (`CPF`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `argus`.`confirmarAlunos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `argus`.`confirmarAlunos` (
  `codAluno` INT NOT NULL,
  `codTurma` VARCHAR(6) NOT NULL,
  `anoLetivo` INT NOT NULL,
  `situacao` VARCHAR(45) NOT NULL,
  `dt_matricula` DATE NOT NULL,
  PRIMARY KEY (`codAluno`, `codTurma`, `anoLetivo`),
  INDEX `fk_codTurma_mat_idx` (`codTurma` ASC) VISIBLE,
  INDEX `fk_anoLetivo_mat_idx` (`anoLetivo` ASC) VISIBLE,
  CONSTRAINT `fk_codAluno_mat`
    FOREIGN KEY (`codAluno`)
    REFERENCES `argus`.`Alunos` (`codPessoa`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_codTurma_mat`
    FOREIGN KEY (`codTurma`)
    REFERENCES `argus`.`Turmas` (`codTurma`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `fk_anoLetivo_mat`
    FOREIGN KEY (`anoLetivo`)
    REFERENCES `argus`.`Turmas` (`anoLetivo`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

USE `argus` ;

-- -----------------------------------------------------
-- procedure getResponsaveis
-- -----------------------------------------------------

DELIMITER $$
USE `argus`$$
CREATE PROCEDURE getResponsaveis()
BEGIN 
	SELECT pessoas.codPessoa, pessoas.Nome, pessoas.Naturalidade, pessoas.Dt_nascimento, pessoas.CPF, Pessoas.Status
	FROM Pessoas
	INNER JOIN ResponsaveisFinanceiros
	WHERE Pessoas.codPessoa = ResponsaveisFinanceiros.codPessoa;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getResponsavelDoAluno
-- -----------------------------------------------------

DELIMITER $$
USE `argus`$$
CREATE PROCEDURE getResponsavelDoAluno(IN aluno INT)
BEGIN 
	SET @responsavel = 0;
	SELECT DISTINCT codPessoa INTO @responsavel FROM argus.ResponsaveisFinanceiros Where codAluno = aluno;
    SELECT * FROM argus.viewResponsavelFinanceiro WHERE codPessoa = @responsavel;
    
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getAlunos
-- -----------------------------------------------------

DELIMITER $$
USE `argus`$$
CREATE PROCEDURE getAlunos(IN Turma VARCHAR(6), IN anoLetivo INT)
BEGIN 
	SELECT DISTINCT pessoas.codPessoa, pessoas.Nome, pessoas.Naturalidade, pessoas.Dt_nascimento, pessoas.CPF, Alunos.nomeMae, Alunos.nomePai, Alunos.codResponsavelFin, Pessoas.Status, `aluno-turma`.situacao 
    FROM argus.`aluno-turma`
    INNER JOIN turmas
    ON `aluno-turma`.codTurma = turmas.codTurma AND `aluno-turma`.anoLetivo = anoLetivo AND `aluno-turma`.codTurma = Turma
    INNER JOIN pessoas
    ON `aluno-turma`.codAluno = pessoas.codPessoa
    INNER JOIN alunos
    ON alunos.codPessoa = `aluno-turma`.codAluno;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure generateNotas
-- -----------------------------------------------------

DELIMITER $$
USE `argus`$$
CREATE PROCEDURE generateNotas(IN alunocodigo INT, IN turmacodigo VARCHAR(6), IN curriculo VARCHAR(5), IN anoLetivoCur INT, IN ano INT)
BEGIN 
    DECLARE codDisciplinaNota VARCHAR(3) DEFAULT NULL;
   
	DECLARE done TINYINT DEFAULT FALSE;
    
    DECLARE cursor1 CURSOR FOR SELECT `Curriculo-Disciplina`.codDisciplina FROM `Curriculo-Disciplina` WHERE `Curriculo-Disciplina`.codCurriculo = curriculo AND
					`Curriculo-Disciplina`.ano = ano;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    OPEN cursor1;
    my_loop:
	LOOP
        
        FETCH NEXT FROM cursor1 INTO codDisciplinaNota;
        
        IF done THEN
			LEAVE my_loop;
		ELSE
			INSERT INTO MediaGeralAluno(codAluno, codDisciplina, serie, anoLetivo, media, situacao) VALUES(alunoCodigo, codDisciplinaNota, ano, anoLetivoCur, 0.0, "Pendente");
			IF (SELECT tipo FROM curriculo WHERE codCurriculo = curriculo) = 'Bimestral' THEN
				INSERT INTO Notas(codAluno, codDisciplina, serie, anoLetivo, unidade, valorUnidade, media, situacao) 
				VALUES(alunoCodigo, codDisciplinaNota, ano, anoLetivoCur,(SELECT tipo FROM curriculo WHERE codCurriculo = curriculo), 1, 0.0, "Pendente"),
                (alunoCodigo, codDisciplinaNota, ano, anoLetivoCur,(SELECT tipo FROM curriculo WHERE codCurriculo = curriculo), 2, 0.0, "Pendente"),
                (alunoCodigo, codDisciplinaNota, ano, anoLetivoCur,(SELECT tipo FROM curriculo WHERE codCurriculo = curriculo), 3, 0.0, "Pendente"),
                (alunoCodigo, codDisciplinaNota, ano, anoLetivoCur,(SELECT tipo FROM curriculo WHERE codCurriculo = curriculo), 4, 0.0, "Pendente"),
                (alunoCodigo, codDisciplinaNota, ano, anoLetivoCur,(SELECT tipo FROM curriculo WHERE codCurriculo = curriculo), 5, 0.0, "Pendente");
            ELSE
				INSERT INTO Notas(codAluno, codDisciplina, serie, anoLetivo, unidade, valorUnidade, media) 
				VALUES(alunoCodigo, codDisciplinaNota, ano, anoLetivoCur,(SELECT tipo FROM curriculo WHERE codCurriculo = curriculo), 1, 0.0, "Pendente"),
                (alunoCodigo, codDisciplinaNota, ano, anoLetivoCur,(SELECT tipo FROM curriculo WHERE codCurriculo = curriculo), 2, 0.0, "Pendente"),
                (alunoCodigo, codDisciplinaNota, ano, anoLetivoCur,(SELECT tipo FROM curriculo WHERE codCurriculo = curriculo), 3, 0.0, "Pendente"),
                (alunoCodigo, codDisciplinaNota, ano, anoLetivoCur,(SELECT tipo FROM curriculo WHERE codCurriculo = curriculo), 4, 0.0, "Pendente");
			END IF;
		END IF;
	END LOOP;
    
    CLOSE cursor1;
    
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure checkDisciplinas
-- -----------------------------------------------------

DELIMITER $$
USE `argus`$$
CREATE PROCEDURE checkDisciplinas(IN codCur varchar(3), IN anoLetivoCur int, IN anoCur int)
BEGIN 
    DECLARE done TINYINT DEFAULT FALSE;
	
    DECLARE codDisciplina VARCHAR(3);
    DECLARE cargaHoraria int;
    
    DECLARE cursor1 CURSOR FOR SELECT `Curriculo-Disciplina`.codDisciplina, `Curriculo-Disciplina`.cargaHoraria FROM `Curriculo-Disciplina` WHERE `Curriculo-Disciplina`.codCurriculo = codCur AND
					`Curriculo-Disciplina`.ano = anoCur AND `Curriculo-Disciplina`.anoLetivo = anoLetivoCur-1;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
	if (SELECT DISTINCT `curriculo-disciplina`.anoLetivo FROM `curriculo-disciplina` 
		WHERE `curriculo-disciplina`.codCurriculo = codCur AND `curriculo-disciplina`.ano = anoCur and `curriculo-disciplina`.anoLetivo = anoLetivoCur) IS NULL THEN
		OPEN cursor1;
		my_loop:
		LOOP
			FETCH NEXT FROM cursor1 INTO codDisciplina, cargaHoraria;
			
			IF done THEN
				LEAVE my_loop;
			ELSE
				INSERT INTO `curriculo-disciplina` VALUES(codCur, codDisciplina, anoCur, anoLetivoCur, cargaHoraria);
			END IF;
		END LOOP;
		CLOSE cursor1;
	END IF; 
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure setSituacaoAluno
-- -----------------------------------------------------

DELIMITER $$
USE `argus`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `setSituacaoAluno`(IN codAluno INT, IN codDisciplina VARCHAR(3), IN serie INT, IN anoLetivo INT, IN unidade VARCHAR(10), IN valorUnidade INT)
BEGIN
	DECLARE mediaVar FLOAT;
    IF unidade = 'Bimestral' AND valorUnidade < 5 THEN
		SELECT AVG(media) INTO mediaVar FROM argus.notas WHERE notas.codAluno = codAluno AND notas.codDisciplina = codDisciplina AND
						notas.serie = serie AND notas.anoLetivo = anoLetivo AND notas.valorUnidade < 5;
		UPDATE MediaGeralAluno SET MediaGeralAluno.media = mediaVar, MediaGeralAluno.situacao = "Pendente" WHERE MediaGeralAluno.codAluno = codAluno AND MediaGeralAluno.codDisciplina = codDisciplina AND MediaGeralAluno.serie = serie AND MediaGeralAluno.anoLetivo = anoLetivo;
        IF mediaVar >= 7 THEN
			UPDATE MediaGeralAluno SET MediaGeralAluno.situacao = 'AM' WHERE MediaGeralAluno.codAluno = codAluno AND MediaGeralAluno.codDisciplina = codDisciplina AND MediaGeralAluno.serie = serie AND MediaGeralAluno.anoLetivo = anoLetivo;
		END IF;
	ELSE IF unidade = 'Bimestral' AND valorUnidade = 5 THEN
		SELECT AVG(media) INTO mediaVar FROM argus.notas WHERE notas.codAluno = codAluno AND notas.codDisciplina = codDisciplina AND
						notas.serie = serie AND notas.anoLetivo = anoLetivo AND notas.valorUnidade < 5;
		SET mediaVar = mediaVar+(SELECT media FROM argus.notas WHERE notas.codAluno = codAluno AND notas.codDisciplina = codDisciplina AND
						notas.serie = serie AND notas.anoLetivo = anoLetivo AND notas.valorUnidade = 5);
		SET mediaVar = mediaVar/2;
		IF mediaVar >= 5 THEN
			UPDATE MediaGeralAluno SET MediaGeralAluno.media = mediaVar, MediaGeralAluno.situacao = 'AP' WHERE MediaGeralAluno.codAluno = codAluno AND MediaGeralAluno.codDisciplina = codDisciplina AND MediaGeralAluno.serie = serie AND MediaGeralAluno.anoLetivo = anoLetivo;
		ELSE
			UPDATE MediaGeralAluno SET MediaGeralAluno.media = mediaVar, MediaGeralAluno.situacao = 'RP' WHERE MediaGeralAluno.codAluno = codAluno AND MediaGeralAluno.codDisciplina = codDisciplina AND MediaGeralAluno.serie = serie AND MediaGeralAluno.anoLetivo = anoLetivo;
		END IF;
	END IF;
	IF unidade = 'Trimestral' AND valorUnidade < 4 THEN
		SELECT AVG(media) INTO mediaVar FROM argus.notas WHERE notas.codAluno = codAluno AND notas.codDisciplina = codDisciplina AND
						notas.serie = serie AND notas.anoLetivo = anoLetivo AND valorUnidade < 4;
		UPDATE MediaGeralAluno SET MediaGeralAluno.media = mediaVar, MediaGeralAluno.situacao = "Pendente" WHERE MediaGeralAluno.codAluno = codAluno AND MediaGeralAluno.codDisciplina = codDisciplina AND MediaGeralAluno.serie = serie AND MediaGeralAluno.anoLetivo = anoLetivo;
        IF mediaVar >= 7 THEN
			UPDATE MediaGeralAluno SET MediaGeralAluno.media = mediaVar, MediaGeralAluno.situacao = 'AM' WHERE MediaGeralAluno.codAluno = codAluno AND MediaGeralAluno.codDisciplina = codDisciplina AND MediaGeralAluno.serie = serie AND MediaGeralAluno.anoLetivo = anoLetivo;
		END IF;
	ELSE IF unidade = 'Trimestral' AND valorUnidade = 4 THEN
		SELECT AVG(media) INTO mediaVar FROM argus.notas WHERE notas.codAluno = codAluno AND notas.codDisciplina = codDisciplina AND
						notas.serie = serie AND notas.anoLetivo = anoLetivo AND notas.valorUnidade < 4;
		SET mediaVar = mediaVar+(SELECT media FROM argus.notas WHERE notas.codAluno = codAluno AND notas.codDisciplina = codDisciplina AND
						notas.serie = serie AND notas.anoLetivo = anoLetivo AND notas.valorUnidade = 4);
		SET mediaVar = mediaVar/2;
		IF mediaVar >= 5 THEN
			UPDATE MediaGeralAluno SET MediaGeralAluno.media = mediaVar, MediaGeralAluno.situacao = 'AP' WHERE MediaGeralAluno.codAluno = codAluno AND MediaGeralAluno.codDisciplina = codDisciplina AND MediaGeralAluno.serie = serie AND MediaGeralAluno.anoLetivo = anoLetivo;
		ELSE
			UPDATE MediaGeralAluno SET MediaGeralAluno.media = mediaVar, MediaGeralAluno.situacao = 'RP' WHERE MediaGeralAluno.codAluno = codAluno AND MediaGeralAluno.codDisciplina = codDisciplina AND MediaGeralAluno.serie = serie AND MediaGeralAluno.anoLetivo = anoLetivo;
        END IF;
    END IF;
	END IF;
	END IF;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `argus`.`ViewUsuario`
-- -----------------------------------------------------
USE `argus`;
CREATE  OR REPLACE VIEW `ViewUsuario`
AS SELECT pessoas.codPessoa, pessoas.Nome, pessoas.Naturalidade, pessoas.Dt_nascimento, pessoas.CPF, usuarios.User, usuarios.Senha, usuarios.Tipo, usuarios.Status
FROM pessoas
INNER JOIN usuarios
ON pessoas.codPessoa = usuarios.codPessoa;

-- -----------------------------------------------------
-- View `argus`.`ViewProfessor`
-- -----------------------------------------------------
USE `argus`;
CREATE  OR REPLACE VIEW `ViewProfessor`
AS SELECT pessoas.codPessoa, pessoas.Nome, pessoas.Naturalidade, pessoas.Dt_nascimento, pessoas.CPF, pessoas.Status, professores.formacao, professores.cursoFormacao
FROM pessoas
INNER JOIN professores
ON pessoas.codPessoa = professores.codPessoa;

-- -----------------------------------------------------
-- View `argus`.`ViewAluno`
-- -----------------------------------------------------
USE `argus`;
CREATE  OR REPLACE VIEW `ViewAluno` 
AS SELECT DISTINCT pessoas.codPessoa, pessoas.Nome, pessoas.Naturalidade, pessoas.Dt_nascimento, pessoas.CPF, Alunos.nomeMae, Alunos.nomePai, Alunos.codResponsavelFin, Pessoas.Status
FROM Pessoas
INNER JOIN Alunos
ON Pessoas.codPessoa = Alunos.codPessoa
INNER JOIN `Aluno-Turma`
ON `Aluno-Turma`.codAluno = Pessoas.codPessoa;

-- -----------------------------------------------------
-- View `argus`.`ViewTurma`
-- -----------------------------------------------------
USE `argus`;
CREATE  OR REPLACE VIEW `ViewTurma`
AS SELECT DISTINCT Turmas.codTurma, Turmas.codCurriculo, Curriculo.Nome, Turmas.anoLetivo, Turmas.ano
FROM Turmas, curriculo
WHERE Turmas.codCurriculo = Curriculo.codCurriculo;

-- -----------------------------------------------------
-- View `argus`.`ViewSessao`
-- -----------------------------------------------------
USE `argus`;
CREATE  OR REPLACE VIEW `ViewSessao` 
AS SELECT `sessaopedagogica`.`codPedagogo` AS `codPedagogo`,
        `pessoas`.`codPessoa` AS `codAluno`,
        `pessoas`.`Nome` AS `nome`,
        `sessaopedagogica`.`data` AS `data`,
        `sessaopedagogica`.`status` AS `status`
FROM Pessoas, SessaoPedagogica
WHERE Pessoas.codPessoa = SessaoPedagogica.codAluno;

-- -----------------------------------------------------
-- View `argus`.`ViewconfirmarAlunos`
-- -----------------------------------------------------
USE `argus`;
CREATE  OR REPLACE VIEW `ViewconfirmarAlunos` AS
SELECT turmas.codTurma, pessoas.codPessoa as codAluno, pessoas.nome as aluno, curriculo.nome as curriculo, turmas.ano as serie, turmas.anoLetivo, confirmarAlunos.dt_matricula, confirmarAlunos.situacao
FROM pessoas, confirmarAlunos, turmas, curriculo
WHERE pessoas.codPessoa = confirmarAlunos.codAluno AND turmas.codTurma = confirmarAlunos.codTurma AND curriculo.codCurriculo = turmas.codCurriculo AND confirmarAlunos.anoLetivo = turmas.anoLetivo;

-- -----------------------------------------------------
-- View `argus`.`ViewResponsavelFinanceiro`
-- -----------------------------------------------------
USE `argus`;
CREATE  OR REPLACE VIEW `ViewResponsavelFinanceiro` AS
SELECT pessoas.codPessoa, pessoas.Nome, pessoas.Naturalidade, pessoas.Dt_nascimento, pessoas.CPF, Pessoas.Status
	FROM Pessoas
	INNER JOIN ResponsaveisFinanceiros
	WHERE Pessoas.codPessoa = ResponsaveisFinanceiros.codPessoa;

-- -----------------------------------------------------
-- View `argus`.`ViewPagamento`
-- -----------------------------------------------------
USE `argus`;
CREATE  OR REPLACE VIEW `ViewPagamento` AS
SELECT pagamentos.codResponsavel, pessoas.nome as responsavel, pagamentos.codAluno, pagamentos.codCurriculo, 
pagamentos.anoLetivo, pagamentos.nossoNumero, pagamentos.num_parcela, pagamentos.dt_vencimento, pagamentos.situacao
FROM pessoas, pagamentos
WHERE pessoas.codPessoa = pagamentos.codResponsavel;

-- -----------------------------------------------------
-- View `argus`.`ViewBoleto`
-- -----------------------------------------------------
USE `argus`;
CREATE  OR REPLACE VIEW `ViewBoleto` AS
SELECT boletos.codResponsavel, boletos.codAluno, boletos.codCurriculo, r.nome as responsavel, a.nome as aluno, curriculo.Nome as curriculo, boletos.anoLetivo, boletos.arquivoPdf
FROM boletos
INNER JOIN pessoas r
ON r.codPessoa = boletos.codResponsavel
INNER JOIN pessoas a
ON a.codPessoa = boletos.codAluno
INNER JOIN curriculo
ON curriculo.codCurriculo = boletos.codCurriculo;
USE `argus`;

DELIMITER $$
USE `argus`$$
CREATE DEFINER = CURRENT_USER TRIGGER `argus`.`Aluno-Turma_AFTER_INSERT` AFTER INSERT ON `Aluno-Turma` FOR EACH ROW
BEGIN
	DECLARE curriculo VARCHAR(5) DEFAULT NULL;
	DECLARE anoLetivoCur INT DEFAULT NULL;
    DECLARE ano INT DEFAULT NULL;
    
	SELECT Turmas.codCurriculo, Turmas.anoLetivo, Turmas.ano INTO curriculo, anoLetivoCur, ano FROM Turmas WHERE Turmas.codTurma = NEW.codTurma AND turmas.anoLetivo = NEW.anoLetivo;
	CALL generateNotas(NEW.codAluno, NEW.codTurma, curriculo, anoLetivoCur, ano);  
END$$

USE `argus`$$
CREATE DEFINER = CURRENT_USER TRIGGER `argus`.`Curriculo_AFTER_INSERT` AFTER INSERT ON `Curriculo` FOR EACH ROW
BEGIN
	INSERT INTO argus.precos VALUES(NEW.codCurriculo, 0.0);
END$$

USE `argus`$$
CREATE DEFINER = CURRENT_USER TRIGGER `argus`.`Notas_AFTER_UPDATE` AFTER UPDATE ON `Notas` FOR EACH ROW
BEGIN
	IF NEW.media != OLD.media THEN
		CALL setSituacaoAluno(NEW.codAluno, NEW.codDisciplina, NEW.serie, NEW.anoLetivo, NEW.unidade, NEW.valorUnidade);
    END IF;
END$$

USE `argus`$$
CREATE DEFINER = CURRENT_USER TRIGGER `argus`.`Pessoas_AFTER_UPDATE` AFTER UPDATE ON `Pessoas` FOR EACH ROW
BEGIN
	UPDATE usuarios SET usuarios.Status = NEW.Status
	WHERE usuarios.codPessoa = NEW.codPessoa;
    
    UPDATE professores SET professores.Status = NEW.Status
    WHERE professores.codPessoa = NEW.codPessoa;
    
    UPDATE alunos SET alunos.Status = NEW.Status
    WHERE alunos.codPessoa = NEW.codPessoa;
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
